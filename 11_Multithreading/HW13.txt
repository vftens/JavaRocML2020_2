Проект Transactions. Есть банк, представленный классом Bank, в котором есть счета (класс Account) с двумя полями — money и accNumber.

Все счета хранятся внутри банка. Клиенты банка (их много) могут делать переводы между счетами, запрашивать баланс по своему счету. 
Все это происходит в highly concurrent (многопоточной) среде.

При этом, транзакции на крупные суммы (> 50000) отправляются на проверку Службе Безопасности. Можно считать, что таких транзакций 
не более 5% от всех. За эту проверку отвечает отдельный и уже реализованный кем-то метод Bank.isFraud.

Служба безопасности в Банке всего одна, работает медленно и не может обрабатывать более одной транзакции одновременно. 
Проверка транзакции занимает у них 1000 мс.

Если проверка выявила мошенничество, то необходимо заблокировать оба счета, т.е. запретить любые изменения остатков.

Нужно реализовать:

Метод “transfer” класса Bank, который переводит деньги с одного счета на другой. Если сумма транзакции > 50000, то после 
совершения транзакции, она отправляется на проверку Службе Безопасности – вызывается метод isFraud. Если возвращается true, 
то делается блокировка счетов (как – на ваше усмотрение).

Метод getBalance класса Bank, который возвращает остаток на счете.

Классы Account и Bank можно дорабатывать как угодно для решения задачи. Кроме того, необходимо реализовать адекватный тест 
(или набор тестов) для эмуляции реальной работы этих двух классов и проверки системы.
