/* 
 * OpenAPI
 *
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMarketApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Получение списка облигаций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        MarketInstrumentListResponse MarketBondsGet ();

        /// <summary>
        /// Получение списка облигаций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        ApiResponse<MarketInstrumentListResponse> MarketBondsGetWithHttpInfo ();
        /// <summary>
        /// Получение списка валютных пар
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        MarketInstrumentListResponse MarketCurrenciesGet ();

        /// <summary>
        /// Получение списка валютных пар
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        ApiResponse<MarketInstrumentListResponse> MarketCurrenciesGetWithHttpInfo ();
        /// <summary>
        /// Получение списка ETF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        MarketInstrumentListResponse MarketEtfsGet ();

        /// <summary>
        /// Получение списка ETF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        ApiResponse<MarketInstrumentListResponse> MarketEtfsGetWithHttpInfo ();
        /// <summary>
        /// Получение инструмента по FIGI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>MarketInstrumentResponse</returns>
        MarketInstrumentResponse MarketSearchByFigiGet (string figi);

        /// <summary>
        /// Получение инструмента по FIGI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>ApiResponse of MarketInstrumentResponse</returns>
        ApiResponse<MarketInstrumentResponse> MarketSearchByFigiGetWithHttpInfo (string figi);
        /// <summary>
        /// Получение инструмента по тикеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>MarketInstrumentListResponse</returns>
        MarketInstrumentListResponse MarketSearchByTickerGet (string ticker);

        /// <summary>
        /// Получение инструмента по тикеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        ApiResponse<MarketInstrumentListResponse> MarketSearchByTickerGetWithHttpInfo (string ticker);
        /// <summary>
        /// Получение списка акций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        MarketInstrumentListResponse MarketStocksGet ();

        /// <summary>
        /// Получение списка акций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        ApiResponse<MarketInstrumentListResponse> MarketStocksGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Получение списка облигаций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketBondsGetAsync ();

        /// <summary>
        /// Получение списка облигаций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketBondsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Получение списка валютных пар
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketCurrenciesGetAsync ();

        /// <summary>
        /// Получение списка валютных пар
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketCurrenciesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Получение списка ETF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketEtfsGetAsync ();

        /// <summary>
        /// Получение списка ETF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketEtfsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Получение инструмента по FIGI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>Task of MarketInstrumentResponse</returns>
        System.Threading.Tasks.Task<MarketInstrumentResponse> MarketSearchByFigiGetAsync (string figi);

        /// <summary>
        /// Получение инструмента по FIGI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>Task of ApiResponse (MarketInstrumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketInstrumentResponse>> MarketSearchByFigiGetAsyncWithHttpInfo (string figi);
        /// <summary>
        /// Получение инструмента по тикеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketSearchByTickerGetAsync (string ticker);

        /// <summary>
        /// Получение инструмента по тикеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketSearchByTickerGetAsyncWithHttpInfo (string ticker);
        /// <summary>
        /// Получение списка акций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketStocksGetAsync ();

        /// <summary>
        /// Получение списка акций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketStocksGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MarketApi : IMarketApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketApi"/> class
        /// </summary>
        /// <returns></returns>
        public MarketApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Получение списка облигаций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        public MarketInstrumentListResponse MarketBondsGet ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = MarketBondsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка облигаций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        public ApiResponse< MarketInstrumentListResponse > MarketBondsGetWithHttpInfo ()
        {

            var localVarPath = "/market/bonds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketBondsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение списка облигаций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketBondsGetAsync ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = await MarketBondsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка облигаций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketBondsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/market/bonds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketBondsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение списка валютных пар 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        public MarketInstrumentListResponse MarketCurrenciesGet ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = MarketCurrenciesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка валютных пар 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        public ApiResponse< MarketInstrumentListResponse > MarketCurrenciesGetWithHttpInfo ()
        {

            var localVarPath = "/market/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketCurrenciesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение списка валютных пар 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketCurrenciesGetAsync ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = await MarketCurrenciesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка валютных пар 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketCurrenciesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/market/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketCurrenciesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение списка ETF 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        public MarketInstrumentListResponse MarketEtfsGet ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = MarketEtfsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка ETF 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        public ApiResponse< MarketInstrumentListResponse > MarketEtfsGetWithHttpInfo ()
        {

            var localVarPath = "/market/etfs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketEtfsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение списка ETF 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketEtfsGetAsync ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = await MarketEtfsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка ETF 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketEtfsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/market/etfs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketEtfsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение инструмента по FIGI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>MarketInstrumentResponse</returns>
        public MarketInstrumentResponse MarketSearchByFigiGet (string figi)
        {
             ApiResponse<MarketInstrumentResponse> localVarResponse = MarketSearchByFigiGetWithHttpInfo(figi);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение инструмента по FIGI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>ApiResponse of MarketInstrumentResponse</returns>
        public ApiResponse< MarketInstrumentResponse > MarketSearchByFigiGetWithHttpInfo (string figi)
        {
            // verify the required parameter 'figi' is set
            if (figi == null)
                throw new ApiException(400, "Missing required parameter 'figi' when calling MarketApi->MarketSearchByFigiGet");

            var localVarPath = "/market/search/by-figi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (figi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "figi", figi)); // query parameter
            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketSearchByFigiGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentResponse)));
        }

        /// <summary>
        /// Получение инструмента по FIGI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>Task of MarketInstrumentResponse</returns>
        public async System.Threading.Tasks.Task<MarketInstrumentResponse> MarketSearchByFigiGetAsync (string figi)
        {
             ApiResponse<MarketInstrumentResponse> localVarResponse = await MarketSearchByFigiGetAsyncWithHttpInfo(figi);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение инструмента по FIGI 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="figi">FIGI</param>
        /// <returns>Task of ApiResponse (MarketInstrumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketInstrumentResponse>> MarketSearchByFigiGetAsyncWithHttpInfo (string figi)
        {
            // verify the required parameter 'figi' is set
            if (figi == null)
                throw new ApiException(400, "Missing required parameter 'figi' when calling MarketApi->MarketSearchByFigiGet");

            var localVarPath = "/market/search/by-figi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (figi != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "figi", figi)); // query parameter
            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketSearchByFigiGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentResponse)));
        }

        /// <summary>
        /// Получение инструмента по тикеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>MarketInstrumentListResponse</returns>
        public MarketInstrumentListResponse MarketSearchByTickerGet (string ticker)
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = MarketSearchByTickerGetWithHttpInfo(ticker);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение инструмента по тикеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        public ApiResponse< MarketInstrumentListResponse > MarketSearchByTickerGetWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling MarketApi->MarketSearchByTickerGet");

            var localVarPath = "/market/search/by-ticker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticker", ticker)); // query parameter
            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketSearchByTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение инструмента по тикеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketSearchByTickerGetAsync (string ticker)
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = await MarketSearchByTickerGetAsyncWithHttpInfo(ticker);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение инструмента по тикеру 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">Тикер инструмента</param>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketSearchByTickerGetAsyncWithHttpInfo (string ticker)
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
                throw new ApiException(400, "Missing required parameter 'ticker' when calling MarketApi->MarketSearchByTickerGet");

            var localVarPath = "/market/search/by-ticker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticker != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ticker", ticker)); // query parameter
            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketSearchByTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение списка акций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketInstrumentListResponse</returns>
        public MarketInstrumentListResponse MarketStocksGet ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = MarketStocksGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка акций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketInstrumentListResponse</returns>
        public ApiResponse< MarketInstrumentListResponse > MarketStocksGetWithHttpInfo ()
        {

            var localVarPath = "/market/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketStocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

        /// <summary>
        /// Получение списка акций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketInstrumentListResponse</returns>
        public async System.Threading.Tasks.Task<MarketInstrumentListResponse> MarketStocksGetAsync ()
        {
             ApiResponse<MarketInstrumentListResponse> localVarResponse = await MarketStocksGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка акций 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketInstrumentListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketInstrumentListResponse>> MarketStocksGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/market/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (sso_auth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketStocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketInstrumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarketInstrumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketInstrumentListResponse)));
        }

    }
}
